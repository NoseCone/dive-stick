// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from "rescript-jzon/src/Jzon.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";

function compSlug(comp) {
  return comp.from + " to " + comp.to + ", " + comp.location;
}

var nullPilotStatus_pilotStatus = [];

var nullPilotStatus = {
  pilotId: "",
  pilotName: "",
  pilotStatus: nullPilotStatus_pilotStatus
};

function mkPilot(xs) {
  if (xs.length !== 2) {
    return {
            pilotId: "",
            pilotName: "",
            pilotStatus: []
          };
  }
  var match = xs[0];
  if (match.length !== 2) {
    return {
            pilotId: "",
            pilotName: "",
            pilotStatus: []
          };
  }
  var pilotId = match[0];
  var pilotName = match[1];
  var pilotStatus = xs[1];
  return {
          pilotId: pilotId,
          pilotName: pilotName,
          pilotStatus: pilotStatus
        };
}

var stopped = Jzon.object2((function (param) {
        return [
                param.announced,
                param.retroactive
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  announced: param[0],
                  retroactive: param[1]
                }
              };
      }), Jzon.field("announced", Jzon.string), Jzon.field("retroactive", Jzon.string));

var rawZone = Jzon.object1((function (param) {
        return param.zoneName;
      }), (function (zoneName) {
        return {
                TAG: /* Ok */0,
                _0: {
                  zoneName: zoneName
                }
              };
      }), Jzon.field("zoneName", Jzon.string));

var rawZones = Jzon.object1((function (param) {
        return param.raw;
      }), (function (raw) {
        return {
                TAG: /* Ok */0,
                _0: {
                  raw: raw
                }
              };
      }), Jzon.field("raw", Jzon.array(rawZone)));

var task = Jzon.object4((function (param) {
        return [
                param.taskName,
                param.zones,
                param.stopped,
                param.cancelled
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  taskName: param[0],
                  zones: param[1],
                  stopped: param[2],
                  cancelled: param[3]
                }
              };
      }), Jzon.field("taskName", Jzon.string), Jzon.field("zones", rawZones), Jzon.optional(Jzon.field("stopped", stopped)), Jzon.optional(Jzon.field("cancelled", Jzon.bool)));

var Codecs = {
  stopped: stopped,
  rawZone: rawZone,
  rawZones: rawZones,
  task: task
};

function getComp(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/comps.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getNominals(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/nominals.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getTaskLengths(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/task-length/task-lengths.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getCompTasks(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/tasks.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        var ts = Jzon.decodeWith(x, Jzon.array(task));
        var ts$p = Belt_Result.getWithDefault(ts, []);
        return Promise.resolve(Curry._1(set, (function (param) {
                          return ts$p;
                        })));
      });
  
}

function getCompPilots(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/gap-point/pilots-status.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        var ps = Jzon.decodeWith(x, Jzon.array(Jzon.array(Jzon.array(Jzon.string))));
        var ps$p = Belt_Array.map(Belt_Result.getWithDefault(ps, []), mkPilot);
        return Promise.resolve(Curry._1(set, (function (param) {
                          return ps$p;
                        })));
      });
  
}

var nullComp = {
  compName: "",
  scoreBack: undefined,
  utcOffset: {
    timeZoneMinutes: 0
  },
  from: "",
  to: "",
  location: "",
  earth: {
    sphere: {
      radius: ""
    }
  },
  earthMath: "",
  give: {
    giveDistance: undefined,
    giveFraction: 0.0
  }
};

var nullNominals = {
  free: "",
  distance: "",
  time: "",
  goal: 0.0
};

export {
  nullComp ,
  compSlug ,
  nullNominals ,
  nullPilotStatus ,
  mkPilot ,
  Codecs ,
  getComp ,
  getNominals ,
  getTaskLengths ,
  getCompTasks ,
  getCompPilots ,
  
}
/* stopped Not a pure module */
