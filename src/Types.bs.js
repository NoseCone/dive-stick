// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

function compSlug(comp) {
  return comp.from + " to " + comp.to + ", " + comp.location;
}

function getComp(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/comps.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getNominals(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/nominals.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getTaskLengths(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/task-length/task-lengths.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getCompTasks(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/comp-input/tasks.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

function getCompPilots(haveUrl, url, set) {
  if (!haveUrl) {
    return ;
  }
  var dataUrl = url + "/gap-point/pilots-status.json";
  var __x = fetch(dataUrl);
  var __x$1 = __x.then(function (prim) {
        return prim.json();
      });
  __x$1.then(function (x) {
        return Promise.resolve(Curry._1(set, (function (param) {
                          return x;
                        })));
      });
  
}

var nullComp = {
  compName: "",
  scoreBack: undefined,
  utcOffset: {
    timeZoneMinutes: 0
  },
  from: "",
  to: "",
  location: "",
  earth: {
    sphere: {
      radius: ""
    }
  },
  earthMath: "",
  give: {
    giveDistance: undefined,
    giveFraction: 0.0
  }
};

var nullNominals = {
  free: "",
  distance: "",
  time: "",
  goal: 0.0
};

var nullPilotStatus = {
  pilotId: "",
  pilotName: "",
  pilotStatus: /* [] */0
};

export {
  nullComp ,
  compSlug ,
  nullNominals ,
  nullPilotStatus ,
  getComp ,
  getNominals ,
  getTaskLengths ,
  getCompTasks ,
  getCompPilots ,
  
}
/* No side effect */
