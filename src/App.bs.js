// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as Comps$RescriptReactIntro from "./Comps.bs.js";
import * as CompTabs$RescriptReactIntro from "./CompTabs.bs.js";
import * as CompHeader$RescriptReactIntro from "./CompHeader.bs.js";

import './site.css';
;

function App(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = url.path;
  var component;
  var exit = 0;
  if (match) {
    switch (match.hd) {
      case "comp" :
          if (match.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {}), "Tasks", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      case "comp-prefix" :
          var match$1 = match.tl;
          if (match$1 && !match$1.tl) {
            component = React.createElement("div", undefined, "Select comp " + match$1.hd);
          } else {
            exit = 1;
          }
          break;
      case "pilots" :
          if (match.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {}), "Pilots", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      case "settings" :
          if (match.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {}), "Settings", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      default:
        exit = 1;
    }
  } else {
    component = React.createElement(Comps$RescriptReactIntro.make, {});
  }
  if (exit === 1) {
    component = React.createElement("div", undefined, "Route not found");
  }
  return React.createElement("div", undefined, component);
}

var make = App;

export {
  make ,
  
}
/*  Not a pure module */
