// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as Comps$RescriptReactIntro from "./Comps.bs.js";
import * as Types$RescriptReactIntro from "./Types.bs.js";
import * as CompTabs$RescriptReactIntro from "./CompTabs.bs.js";
import * as CompHeader$RescriptReactIntro from "./CompHeader.bs.js";

import './site.css';
;

function App(Props) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = React.useState(function () {
        return "";
      });
  var setCompUrl = match[1];
  var compUrl = match[0];
  var match$1 = React.useState(function () {
        return Types$RescriptReactIntro.nullComp;
      });
  var setComp = match$1[1];
  var comp = match$1[0];
  var haveCompUrl = compUrl !== "";
  React.useEffect((function () {
          var match = url.path;
          if (!match) {
            return ;
          }
          if (match.hd !== "comp-prefix") {
            return ;
          }
          var match$1 = match.tl;
          if (!match$1) {
            return ;
          }
          if (match$1.tl) {
            return ;
          }
          var compPrefix = match$1.hd;
          Curry._1(setCompUrl, (function (param) {
                  return "http://" + compPrefix + ".flaretiming.com/json";
                }));
          RescriptReactRouter.push("/comp");
          
        }), [
        url,
        setCompUrl
      ]);
  React.useEffect((function () {
          Types$RescriptReactIntro.getComp(haveCompUrl, compUrl, setComp);
          
        }), [
        haveCompUrl,
        compUrl,
        setComp
      ]);
  var match$2 = url.path;
  var component;
  var exit = 0;
  if (match$2) {
    switch (match$2.hd) {
      case "comp" :
          if (match$2.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {
                      comp: comp
                    }), "Tasks", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      case "comp-prefix" :
          var match$3 = match$2.tl;
          if (match$3 && !match$3.tl) {
            component = React.createElement("div", undefined);
          } else {
            exit = 1;
          }
          break;
      case "pilots" :
          if (match$2.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {
                      comp: comp
                    }), "Pilots", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      case "settings" :
          if (match$2.tl) {
            exit = 1;
          } else {
            component = React.createElement("div", undefined, React.createElement(CompHeader$RescriptReactIntro.make, {
                      comp: comp
                    }), "Settings", React.createElement(CompTabs$RescriptReactIntro.make, {}));
          }
          break;
      default:
        exit = 1;
    }
  } else {
    component = React.createElement(Comps$RescriptReactIntro.make, {});
  }
  if (exit === 1) {
    component = React.createElement("div", undefined, "Route not found");
  }
  return React.createElement("div", undefined, component, "comp url: " + compUrl);
}

var make = App;

export {
  make ,
  
}
/*  Not a pure module */
